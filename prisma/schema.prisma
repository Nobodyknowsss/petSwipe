generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id        String     @id @unique
  username  String     @unique
  email     String     @unique
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
  chats     Chat[]
  comments  Comment[]
  followers Follower[]
  likes     Like[]
  pets      Pet[]
  videos    Video[]
}

model Pet {
  id          String   @id @default(dbgenerated("uuid_generate_v4()"))
  name        String
  breed       String
  age         Int
  gender      String
  location    String
  description String
  photoUrl    String
  videoUrl    String
  ownerId     String
  createdAt   DateTime @default(now())
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Video {
  id          String    @id @default(dbgenerated("uuid_generate_v4()"))
  uri         String
  user_id     String
  createdAt   DateTime  @default(now())
  description String
  comments    Comment[]
  like        Like[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Like {
  id            String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id       String
  video_id      String
  video_user_id String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
}

model Follower {
  id               String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id          String
  follower_user_id String
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id            String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id       String
  video_id      String
  video_user_id String
  text          String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
}

model Chat {
  id           String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id      String
  chat_user_id String
  users_keys   String
  text         String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
