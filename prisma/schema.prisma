generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id                String             @id @unique
  username          String             @unique
  email             String             @unique
  verified          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  is_seller         Boolean            @default(false)
  Adoption_Profile  Adoption_Profile[]
  adoption_requests Adoption_Request[]
  chats             Chat[]
  comments          Comment[]
  followers         Follower[]
  likes             Like[]
  pets              Pet[]
  videos            Video[]
}

model Pet {
  id                String             @id @default(dbgenerated("uuid_generate_v4()"))
  name              String
  breed             String
  age               Int
  gender            String
  location          String
  description       String
  photoUrl          String
  videoUrl          String
  ownerId           String
  createdAt         DateTime           @default(now())
  adoption_requests Adoption_Request[]
  owner             User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Adoption_Request {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id   String
  pet_id    String
  status    String   @default("pending")
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pet       Pet      @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, pet_id])
}

model Video {
  id          String    @id @default(dbgenerated("uuid_generate_v4()"))
  uri         String
  user_id     String
  createdAt   DateTime  @default(now())
  description String
  comments    Comment[]
  like        Like[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Like {
  id            String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id       String
  video_id      String
  video_user_id String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
}

model Follower {
  id               String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id          String
  follower_user_id String
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id            String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id       String
  video_id      String
  video_user_id String
  text          String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
}

model Chat {
  id           String   @id @default(dbgenerated("uuid_generate_v4()"))
  user_id      String
  chat_user_id String
  users_keys   String
  text         String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Adoption_Profile {
  id                 BigInt    @id @default(autoincrement())
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  user_id            String?
  first_name         String?
  last_name          String?
  address            String?
  phone              String?
  email              String?
  birth_date         DateTime? @db.Date
  occupation         String?
  company_name       String?
  social             String?
  social_link        String?
  status             String?
  pronouns           String?
  alt_first_name     String?
  alt_last_name      String?
  alt_relationship   String?
  alt_phone          String?
  alt_email          String?
  preference         String?
  has_adopted        Boolean?
  adopt_specific_pet Boolean?
  pet_description    String?
  User               User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Adoption Profile")
}
